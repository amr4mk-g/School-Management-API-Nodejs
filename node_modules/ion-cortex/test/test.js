require('dotenv').config()

const Cortex          = require('../index');
const { performance } = require('perf_hooks');

let errored = 0;
let errors = [];

(async()=>{

    const cortex = new Cortex({
        prefix: "ionx",
        url: "redis://127.0.0.1:6379",
        type: 'tester',
        // activeDelay: 5000,
        // idleDelay: 3000,
        state: ()=>{
            return {
                cors: 12
            }
        },
    });

    cortex.sub("_fojo_", (d, meta, cb)=>{
            console.log(`ðŸ‘¯`,d);
            cb({s:'dddd', meta})
        }
    );

    cortex.sub("nested.*",(d, meta, cb)=>{
        if(d.error){
            console.log(d.error);
        }
        // console.log('got meta', meta);
       
        let value = 0;
        if(!d.numbers){
            throw Error(`missing number`);
        } else {
            d.numbers.forEach(i=>{
                value=value+i});
        }
        cb({value});
    }) 

    // setTimeout(()=>{
        
    //     console.log("ðŸš€ ~ file: test.js:47 ~ setTimeout ~ cortex.nodes:", cortex.nodes)
    //     setInterval(()=>{
    //         var t0 = performance.now()
    //         cortex.emitToOneOf({
    //             type: 'sfu',
    //             call: "nested._mojo_",
    //             data: {
    //                 numbers: [1,3,4],
    //             },
    //             reply: {
    //                 to: cortex.id,
    //                 call: '_fojo_',
    //             }
    //     }, 
    //     (data)=>{
    //         var t1 = performance.now();
    //         console.log(`time: `, t1-t0);
    //         if(data.error){
    //             console.log(`RPC ERROR`, data.error);
    //             errored++;
    //             errors.push(data.error);
    //         } else {
    //             console.log(`RPC su----->`, data);
    //         }
    //         console.log(`errored: ${errored}`, errors);
    //     }
    //     )}, 10);

    // }, 3000)
    
    
    
})();

