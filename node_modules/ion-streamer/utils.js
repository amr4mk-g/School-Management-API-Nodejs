exports.slugify = (text)=>{
    const from = "ãàáäâẽèéëêìíïîõòóöôùúüûñç·/_,:;"
    const to = "aaaaaeeeeeiiiiooooouuuunc------"
  
    const newText = text.split('').map(
      (letter, i) => letter.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i)))
  
    return newText
      .toString()                     // Cast to string
      .toLowerCase()                  // Convert the string to lowercase letters
      .trim()                         // Remove whitespace from both sides of a string
      .replace(/\s+/g, '-')           // Replace spaces with -
      .replace(/&/g, '-y-')           // Replace & with 'and'
      .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
      .replace(/\-\-+/g, '-');        // Replace multiple - with single -
}

exports.flattenObject = (obj)=>{
  return Object.keys(obj).reduce(function (r, k) {
    return r.concat(k, obj[k]);
  }, []);
}

exports.flatArrToObject = (arr)=>{
  let data = {};
  let next=0;
  for(let i=0; i<arr.length; i++){
    if(i==next){
      data[arr[i]] = arr[i+1];
      next=next+2;
    }
  }
  return data;
}

_regExpEscape = (s) => {
  return s.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
}
_wildcardToRegExp = (s) => {
  return new RegExp('^' + s.split(/\*+/).map(_regExpEscape).join('.*') + '$');
}
exports.match = (str, model) => {
  return _wildcardToRegExp(model).test(str);
}